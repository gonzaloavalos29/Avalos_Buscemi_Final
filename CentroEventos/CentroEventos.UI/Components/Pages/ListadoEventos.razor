@page "/listadoeventos"
@rendermode InteractiveServer

@inject EventoDeportivoListarUseCase ListarEventos
@inject EventoDeportivoBajaUseCase EventoBaja
@inject NavigationManager Nav
@inject ServicioSesionUsuario Sesion
@inject IServicioAutorizacion Autorizacion
@inject IRepositorioPersona RepoPersonas

<h3>Listado de Eventos Deportivos</h3>

@if (!Sesion.EstaLogeado)
{
    <p>No estás logueado.</p>
    <NavLink href="/">Iniciar sesión</NavLink>
}
else
{
    @if (eventos.Count == 0)
    {
        <p>No hay eventos registrados.</p>
    }

    <DialogoConfirmacion @ref="dialogo" OnConfirmado="EliminarConfirmado" />

    <button class="btn btn-success mb-3"
            @onclick="@(() => Nav.NavigateTo("/editar-evento"))"
            disabled="@(Sesion.UsuarioActual?.id == null || !Autorizacion.PoseeElPermiso(Sesion.UsuarioActual.id, Permiso.EventoAlta))">
        <span class="bi bi-plus-circle"></span> Nuevo Evento
    </button>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Lugar</th>
                <th>Fecha y Hora</th>
                <th>Cupo Maximo</th>
                <th>Responsable</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var evento in eventos)
            {
                var responsable = personas.FirstOrDefault(p => p.Id == evento.ResponsableId);
                <tr>
                    <td>@evento.Id</td>
                    <td>@evento.Nombre</td>
                    <td>@evento.Descripcion</td>
                    <td>@evento.Lugar</td>
                    <td>@evento.FechaHoraInicio.ToString("g")</td>
                    <td>@evento.CupoMaximo</td>
                    <td>@(responsable?.Nombre ?? "¿?") @(responsable?.Apellido)</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(() => EditarEvento(evento))"
                                disabled="@(Sesion.UsuarioActual?.id == null || !Autorizacion.PoseeElPermiso(Sesion.UsuarioActual.id, Permiso.EventoModificacion))">
                            Editar
                        </button>
                        <button class="btn btn-danger" @onclick="@(() => ConfirmarEliminacion(evento))"
                                disabled="@(Sesion.UsuarioActual?.id == null || !Autorizacion.PoseeElPermiso(Sesion.UsuarioActual.id, Permiso.EventoBaja))">
                            Eliminar
                        </button>
                        @if (evento.FechaHoraInicio <= DateTime.Now) // esto lo ponemos asi porq son los q asistieron(el boton aparece una vez finalizado el evento)
                                                                    //si se quiere probar  podemos editar reservas como presente y esperar q pase un evento
                        {
                            <button class="btn btn-info" @onclick="@(() => Nav.NavigateTo($"/asistencia-evento/{evento.Id}"))">
                                Ver Asistencia
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(mensaje))
{
    <p class="text-danger">@mensaje</p>
}
@code {
    private Guid? idUsuario => Sesion.UsuarioActual?.id;

    private List<EventoDeportivo> eventos = new();
    private List<Persona> personas = new();
    private EventoDeportivo? seleccionado;
    private DialogoConfirmacion? dialogo;
    private string? mensaje;

    protected override void OnInitialized()
    {
        personas = RepoPersonas.Listar();
        RefrescarListado();
    }

    private void RefrescarListado()
    {
        eventos = ListarEventos.Ejecutar();
    }

    private void EditarEvento(EventoDeportivo evento)
    {
        Nav.NavigateTo($"/editar-evento/{evento.Id}");
    }

    private void ConfirmarEliminacion(EventoDeportivo evento)
    {
        seleccionado = evento;
        dialogo?.Mostrar($"¿Seguro que deseas eliminar el evento '{evento.Nombre}'?");
    }

    private void EliminarConfirmado()
    {
        if (seleccionado == null) return;

        try
        {
            EventoBaja.Ejecutar(seleccionado.Id, Sesion.UsuarioActual!.id);
            RefrescarListado();
        }
        catch (Exception ex)
        {
            mensaje=ex.Message;
        }
    }
}
